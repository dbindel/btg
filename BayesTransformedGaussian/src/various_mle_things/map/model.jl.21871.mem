        - using Distributions
        - using Distances
        - using Random
        - using LinearAlgebra
        - using Zygote
        - using Zygote: @adjoint
        - 
        - include("./kernel.jl")
        - include("./transform.jl")
        - include("./covariate.jl")
        - 
        - abstract type AbstractParameter{T} end
        - 
        - struct Parameter{T}
        -     param::Vector{T}
        -     probs::Vector{Float64}
        - end
        - 
        - mutable struct ScalarParameter{T<:Real} <: AbstractParameter{T}
        -     param::T
        -     dist::Distribution{Univariate,Continuous}
        - end
        - 
        - struct VectorParameter{T<:Real} <: AbstractParameter{T}
        -     param::Vector{T}
        -     dist::Vector{Distribution{Univariate,Continuous}}
        - end
        - 
        - logjacobian(g, λ, y) = sum(x -> log∂(g, λ, x), y)
        - 
        - Zygote.@adjoint function mul!(
        -     C::AbstractMatrix,
        -     A::AbstractMatrix,
        -     B::AbstractMatrix,
        -     α::Real,
        -     β::Real,
        - )
        -     tmp, back = pullback(C, A, B, α, β) do C, A, B, α, β
        -         (A * B) .* α .+ C .* β 
        -     end
        -     C .= tmp
        -     return C, c::AbstractMatrix -> back(c)
        - end
        - 
        - Zygote.@adjoint function ldiv!(A, b)
        -     tmp, back = pullback(A, b) do A, b
        -         A \ b
        -     end
        -     b .= tmp
        -     return b, c::AbstractArray -> back(c)
        - end
        - Zygote.@adjoint function ldiv!(c, A, b)
        -     tmp, back = pullback(A, b) do A, b
        -         A \ b
        -     end
        -     c .= tmp
        -     return b, c::AbstractArray -> (nothing, back(c)...)
        - end
        - 
        - Zygote.@adjoint function cholesky!(A)
        -     tmp, back = pullback(A) do A
        -         cholesky(A)
        -     end
        -     return tmp, c::AbstractArray -> back(c)
        - end
        - 
        - function update_Kxx′!(
        -     Kxx′::AbstractMatrix,
        -     B::AbstractMatrix,
        -     Kux::AbstractMatrix,
        -     W::AbstractMatrix,
        -     W′::AbstractMatrix
        - )
        -     mul!(Kxx′, W', B, -1, 1)
        -     mul!(Kxx′, Kux', W′, -1, 1)
        -     return Kxx′
        - end
        - 
        - function update_Kx′!(
        -     Kx′::AbstractMatrix,
        -     B::AbstractMatrix,
        -     Kux′::AbstractMatrix,
        -     W′::AbstractMatrix
        - ) # B = Kux′ .- Ku * W′
        -     mul!(Kx′, (W′)', B, -1, 1)
        -     mul!(Kx′, (Kux′)', W′, -1, 1)
        -     return Kx′
        - end
        - 
        - struct Border
        -     U::Matrix{Float64} # p observation locations
        -     Fu::LU{Float64, Matrix{Float64}} # p x p covariates at U
        -     X::Matrix{Float64} # n - p observation locations
        -     W::Matrix{Float64} # Fu \ Fx
        -     y::Vector{Float64} # length n vector
        - end
        - function border(f, U, X, y)
        0     Fu = lu!(f(U))
        0     W = ldiv!(Fu, f(X))
        0     return Border(U, Fu, X, W, y)
        - end
        - 
        - struct Block
        -     Ku::Matrix{Float64}
        -     Kux::Matrix{Float64}
        -     B::Matrix{Float64}
        -     rKx::Matrix{Float64}
        - end
        - function block(p, m)
        0     Ku = Matrix{Float64}(undef, p, p)
        0     Kux = Matrix{Float64}(undef, p, m)
        0     B = Matrix{Float64}(undef, p, m)
        0     rKx = Matrix{Float64}(undef, m, m)
        0     return Block(Ku, Kux, B, rKx)
        - end
        - 
        - struct RightHandSide
        -     z::Vector{Float64}
        -     rz::Vector{Float64}
        -     rc::Vector{Float64}
        - end
        - function righthandside(p, m)
        0     z = Vector{Float64}(undef, p + m)
        0     rz = Vector{Float64}(undef, m)
        0     rc = Vector{Float64}(undef, m)
        0     return RightHandSide(z, rz, rc)
        - end
        - 
        - function logabsdet(Fu, rKx)
        0     s = (-1.0) ^ (size(Fu, 1) % 2)
        0     return 2 * logabsdet(Fu)[1] + logdet(rKx), s
        - end
        - 
        - function reduced_system(k, θ, ϵ, br, bl)
        0     p, m = size(br.W)
        0     Ku = jitter!(covariance!(bl.Ku, k, θ, br.U, br.U), ϵ)
        0     Kux = covariance!(bl.Kux, k, θ, br.U, br.X)
        0     Kx = jitter!(covariance!(bl.rKx, k, θ, br.X, br.X), ϵ)
 29120000     B = Kux .- Ku * br.W
 22400000     rKx = cholesky(Symmetric(update_Kx′!(Kx, B, Kux, br.W)))
        0     return rKx
        - end
        - 
        - function solve_reduced(g, λ, rKx, br, rhs)
        0     p = size(br.U, 2)
        0     rhs.z .= (x -> transform(g, λ, x)).(br.y)
  3360000     @views rhs.rz .= rhs.z[p+1:end]
  3360000     @views rz = mul!(rhs.rz, br.W', rhs.z[1:p], -1, 1)
  2240000     return ldiv!(rhs.rc, rKx, rz), rz
        - end
        - 
        - function logprob(k, θ, ϵ, g, λ, br, bl, rhs, lnpenalty)
        0     p, m = size(br.W)
        0     lnJ = logjacobian(g, λ, br.y)
        0     rKx = reduced_system(k, θ, ϵ, br, bl)
        0     rc, rz = solve_reduced(g, λ, rKx, br, rhs)
        0     lnQ = log(dot(rc, rz))
        0     lnDet = logabsdet(br.Fu, rKx)[1]
        - 
        0     return m / (m + p) * lnJ - m / 2 * lnQ - 1 / 2 * lnDet + lnpenalty
        - end
        - 
